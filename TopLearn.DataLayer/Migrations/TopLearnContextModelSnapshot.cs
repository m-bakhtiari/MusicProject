// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TopLearn.DataLayer.Context;

namespace TopLearn.DataLayer.Migrations
{
    [DbContext(typeof(TopLearnContext))]
    partial class TopLearnContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TopLearn.DataLayer.Entities.Course.Academy", b =>
                {
                    b.Property<int>("AcademyId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AcademyTitle")
                        .HasMaxLength(800);

                    b.Property<string>("ActiveDays")
                        .HasMaxLength(500);

                    b.Property<string>("Address")
                        .HasMaxLength(4200);

                    b.Property<string>("LearningInstrument")
                        .HasMaxLength(1000);

                    b.Property<string>("LogoImageName")
                        .HasMaxLength(100);

                    b.Property<string>("Phone")
                        .HasMaxLength(50);

                    b.Property<string>("Website")
                        .HasMaxLength(1000);

                    b.HasKey("AcademyId");

                    b.ToTable("Academies");
                });

            modelBuilder.Entity("TopLearn.DataLayer.Entities.Course.CourseGroup", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GroupTitle")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<bool>("IsDelete");

                    b.Property<int?>("ParentId");

                    b.HasKey("GroupId");

                    b.HasIndex("ParentId");

                    b.ToTable("CourseGroups");
                });

            modelBuilder.Entity("TopLearn.DataLayer.Entities.Course.Instrument", b =>
                {
                    b.Property<int>("InstrumentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<string>("IconImage");

                    b.Property<string>("ImageName");

                    b.Property<string>("InstrumentTitle")
                        .HasMaxLength(450);

                    b.HasKey("InstrumentId");

                    b.ToTable("Instruments");
                });

            modelBuilder.Entity("TopLearn.DataLayer.Entities.Course.MenuItem", b =>
                {
                    b.Property<int>("MenuItemId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("Position");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("MenuItemId");

                    b.ToTable("MenuItems");
                });

            modelBuilder.Entity("TopLearn.DataLayer.Entities.Course.MusicNote", b =>
                {
                    b.Property<int>("MusicNoteId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FileName")
                        .HasMaxLength(100);

                    b.Property<int?>("InstrumentId");

                    b.Property<string>("Title")
                        .HasMaxLength(3500);

                    b.HasKey("MusicNoteId");

                    b.HasIndex("InstrumentId");

                    b.ToTable("MusicNotes");
                });

            modelBuilder.Entity("TopLearn.DataLayer.Entities.Course.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseDescription")
                        .IsRequired();

                    b.Property<string>("CourseImageName")
                        .HasMaxLength(50);

                    b.Property<int>("CoursePrice");

                    b.Property<string>("CourseTitle")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreateDate");

                    b.Property<int>("GroupId");

                    b.Property<int?>("SubGroup");

                    b.Property<string>("Tags")
                        .HasMaxLength(600);

                    b.Property<DateTime?>("UpdateDate");

                    b.HasKey("ProductId");

                    b.HasIndex("GroupId");

                    b.HasIndex("SubGroup");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("TopLearn.DataLayer.Entities.Course.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("ImageName")
                        .HasMaxLength(500);

                    b.Property<string>("LearningInstrument")
                        .HasMaxLength(200);

                    b.Property<int?>("Position");

                    b.Property<string>("ShortKey")
                        .HasMaxLength(5);

                    b.Property<string>("StudentFullName")
                        .HasMaxLength(200);

                    b.HasKey("StudentId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("TopLearn.DataLayer.Entities.Course.StudentConcert", b =>
                {
                    b.Property<int>("StudentConcertId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcertDate")
                        .HasMaxLength(300);

                    b.Property<string>("Description");

                    b.Property<int?>("Position");

                    b.Property<string>("Title")
                        .HasMaxLength(800);

                    b.Property<int?>("Type");

                    b.HasKey("StudentConcertId");

                    b.ToTable("StudentConcerts");
                });

            modelBuilder.Entity("TopLearn.DataLayer.Entities.Course.StudentConcertImage", b =>
                {
                    b.Property<int>("StudentConcertImageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("StudentConcertId");

                    b.HasKey("StudentConcertImageId");

                    b.HasIndex("StudentConcertId");

                    b.ToTable("StudentConcertImages");
                });

            modelBuilder.Entity("TopLearn.DataLayer.Entities.Course.StudentImage", b =>
                {
                    b.Property<int>("StudentImageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("StudentId");

                    b.HasKey("StudentImageId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentImages");
                });

            modelBuilder.Entity("TopLearn.DataLayer.Entities.User.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("RegisterDate");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new { UserId = 1, Email = "vahidnajafizadeh@gmail.com", IsActive = true, IsDelete = false, Password = "E1-0A-DC-39-49-BA-59-AB-BE-56-E0-57-F2-0F-88-3E", RegisterDate = new DateTime(2024, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), UserName = "Vahid Najafizadeh" }
                    );
                });

            modelBuilder.Entity("TopLearn.DataLayer.Entities.Course.CourseGroup", b =>
                {
                    b.HasOne("TopLearn.DataLayer.Entities.Course.CourseGroup")
                        .WithMany("CourseGroups")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("TopLearn.DataLayer.Entities.Course.MusicNote", b =>
                {
                    b.HasOne("TopLearn.DataLayer.Entities.Course.Instrument", "Instrument")
                        .WithMany("MusicNotes")
                        .HasForeignKey("InstrumentId");
                });

            modelBuilder.Entity("TopLearn.DataLayer.Entities.Course.Product", b =>
                {
                    b.HasOne("TopLearn.DataLayer.Entities.Course.CourseGroup", "CourseGroup")
                        .WithMany("Courses")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TopLearn.DataLayer.Entities.Course.CourseGroup", "Group")
                        .WithMany("SubGroup")
                        .HasForeignKey("SubGroup");
                });

            modelBuilder.Entity("TopLearn.DataLayer.Entities.Course.StudentConcertImage", b =>
                {
                    b.HasOne("TopLearn.DataLayer.Entities.Course.StudentConcert", "StudentConcert")
                        .WithMany("StudentConcertImages")
                        .HasForeignKey("StudentConcertId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TopLearn.DataLayer.Entities.Course.StudentImage", b =>
                {
                    b.HasOne("TopLearn.DataLayer.Entities.Course.Student", "Student")
                        .WithMany("StudentImages")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
